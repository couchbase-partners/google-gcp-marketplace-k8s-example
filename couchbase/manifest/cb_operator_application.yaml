apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  name: "$name"
  namespace: "$namespace"
  annotations:
    marketplace.cloud.google.com/deploy-info: '{partner_id: "couchbase-dev", product_id: "couchbase-operator", partner_name: "Couchbase"}'
  labels:
    app.kubernetes.io/name: "$name"
spec:
  descriptor:
    description: |-
      Manage Couchbase Deployments on Kubernetes
    links:
    - description: 'Couchbase Autonomous Operator Overview'
      url: https://www.couchbase.com/products/cloud/kubernetes
    - description: 'Couchbase Autonomous Operator Documentation'
      url: http://docs.couchbase.com/prerelease/couchbase-operator/beta/prerequisiteAndSetup.html
    - description: 'Couchbase Official Documentation'
      url: https://developer.couchbase.com/server
    - description: 'The Couchbase Autonomous Operator is provided at no charge while in beta.  However, for Couchbase Server you are required to provide your own license'
      url: https://www.couchbase.com/subscriptions-and-support#pricingForm 
    - description: 'By using Couchbase Software, you agree to this End User License Agreement'
      url: https://www.couchbase.com/ESLA02152018
    notes: |-

      If all listings display a green checkbox, you have successfully installed the Couchbase Autonomous Operator.  
      
      The Couchbase Autonomous Operator manages Couchbase clusters on Kubernetes.  By the end of this guide you will have a running Couchbase cluster.
      
      There will be some command-line work, since the Couchbase Web Console is used to manage the clusters.
      The Couchbase Web Console requires access to an internet browser from a local environment.  
      
      The most important thing to note is you **cannot exclusively use the cloud shell**, if you would like to use the Couchbase Web Console.  A linux/Mac terminal environment on a host machine
      is required.
      
      ### Required Tools Installation and Setup 

      To setup your local environment please install [gcloud](https://cloud.google.com/sdk/) and [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/)

      ### Authorizing your Account

      With gcloud installed in a local environment, log in as yourself:
      
      `gcloud auth login`

      The values for CLUSTER and ZONE can be found under the "Details" tab.  With those values, set two environment variables in your local terminal (example values are provided):

      ```
      CLUSTER=cluster-1
      ZONE=us-west1-a
      ```

      Configure kubectl authorization via gcloud by:
      
      `gcloud container clusters get-credentials "$CLUSTER" --zone "$ZONE"`

      Bootstrap RBAC cluster-admin for your user:

      ```
      kubectl create clusterrolebinding cluster-admin-binding \
        --clusterrole cluster-admin --user $(gcloud config get-value account)
      ```

      ### Deploying a Couchbase Cluster
      
      In the local terminal window view the operator details by typing:

      `kubectl get deployments -o wide`

      Create a file called created-cb-cluster.yaml in your local terminal, using the contents below:

      ```
      apiVersion: couchbase.database.couchbase.com/v1beta1
      kind: CouchbaseCluster
      metadata:
        name: cb-cluster-member
      spec:
        baseImage: couchbase/server
        version: enterprise-5.1.0
        authSecret: $name-secret
        exposeAdminConsole: true
        cluster:
          dataServiceMemoryQuota: 256
          indexServiceMemoryQuota: 256
          searchServiceMemoryQuota: 256
          indexStorageSetting: memory_optimized
          autoFailoverTimeout: 5
        buckets:
          - name: default
            type: couchbase
            memoryQuota: 128
            replicas: 1
            ioPriority: high
            evictionPolicy: fullEviction
            conflictResolution: seqno
            enableFlush: true
            enableIndexReplica: false
        servers:
          - size: 3
            name: all_services
            services:
              - data
              - index
              - query
              - search
            dataPath: /opt/couchbase/var/lib/couchbase/data
            indexPath: /opt/couchbase/var/lib/couchbase/data
      ```

      The file defines a Couchbase cluster with 3 nodes each running the data, index, query and search services.

      Apply the file to your environment with the following command:

      `kubectl apply -f created-cb-cluster.yaml`

      Wait until at least the first node is ready:

      `kubectl get pods --watch`

      Use the shortcut combination Control-C to cancel the watch, after at least one node is ready (the output will look similar to below):

      ```
                     NAME                                 READY     STATUS                             
      cb-cluster-member-0000                              1/1       Running
      ```
  
      ### Accessing the Couchbase Web Console

      Certain ports have to be forwarded so that the Couchbase Web Console can be accessed.  
      
      Open a __new terminal window__ (as the next command must continue to run) and run the command:

      `kubectl port-forward cb-cluster-member-0000 8091:8091`

      Now navigate to the Couchbase Web Console at __http://localhost:8091__ to login.

      \*Please note: The username and password may be found under Application info.

  info:
  - name: Couchbase Web Console Username
    value: $dbUsername
  - name: Couchbase Web Console Password
    type: Reference
    valueFrom:
      secretKeyRef:
        key: password
        name: $name-secret
  type: Couchbase
  version: '0.81beta'
  selector:
    matchLabels:
      app.kubernetes.io/name: "$name"
  componentKinds:
  - group: apps/v1beta2
    kind: Deployment
  - group: batch/v1
    kind: Job
  - group: v1
    kind: PersistentVolumeClaim
  - group: v1
    kind: Secret
  - group: v1
    kind: Service
---
apiVersion: v1
kind: Secret
metadata:
  name: "$name-secret"
  labels:
    app.kubernetes.io/name: "$name"
type: Opaque
data:
  username: $dbUsernameBase64
  password: $dbPassword
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: couchbase-operator
  namespace: "$namespace"
  labels:
    app.kubernetes.io/name: "$name"
spec:
  replicas: $operatorReplicas
  template:
    metadata:
      labels:
        name: couchbase-operator
    spec:
    spec:
      serviceAccountName: $operatorServiceAccount
      containers:
      - name: couchbase-operator
        image: "$couchbaseOperatorImage"
        env:
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
          - name: readiness-port
            containerPort: $containerPort
        readinessProbe:
          httpGet:
            path: /readyz
            port: readiness-port
          initialDelaySeconds: $initialDelaySeconds
          periodSeconds: $periodSeconds
          failureThreshold: $failureThreshold
---
