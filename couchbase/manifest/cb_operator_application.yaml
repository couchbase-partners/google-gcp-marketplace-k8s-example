apiVersion: app.k8s.io/v1alpha1
kind: Application
metadata:
  name: "$name"
  namespace: "$namespace"
  annotations:
    marketplace.cloud.google.com/deploy-info: '{partner_id: "couchbase-dev", product_id: "couchbase-operator", partner_name: "Couchbase"}'
  labels:
    app.kubernetes.io/name: "$name"
spec:
  descriptor:
    description: >-
      The world's most powerful NoSQL database and the Couchbase Autonomous Operator

    links:
    - description: 'For all things related to Couchbase:'
      url: https://www.couchbase.com/
    - description: 'Learn more about the Couchbase Autonomous Operator'
      url: https://www.couchbase.com/products/cloud/kubernetes
    - description: 'EULA'
      url: https://www.couchbase.com/ESLA02152018
    - description: 'The Couchbase Autonomous Operator is in Beta.  Please BYOL for the Couchbase Clusters you deploy via the Operator'
      url: https://www.couchbase.com/legal/agreements#ProductLicenses
    - description: 'Full github walkthrough'
      url: https://github.com/couchbase-partners/marketplace-k8s-app-example/
    notes: |-


      ## The Couchbase Autonomous Operator is installed now what?
      
      If you see all green checkboxes on the right, you have sucessfully installed the Couchbase Autonomus Operator.  The job of the Couchbase Autonomous Operator 
      is to Manage Couchbase Deployments on Kubernetes.  Now we move on to doing that.  The following steps takes a bit of setup but are nothing too difficult.

      There will be some command-line work. We will be using the Couchbase Admin WebUI to manage the clusters.
      Doing that requires access to a browser from a local environment.  
      
      The most important thing to note is you **can not use the cloud shell** to complete all steps.
       
      ### Tool dependencies and install instructions
      
      The links below provide all instructions that are needed:

      - [gcloud](https://cloud.google.com/sdk/)
      - [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/)

      ### Authorization:

      Log in as yourself by running:
      
      'gcloud auth login'

      Now type the below in your terminal:

      ```
      CLUSTER=cluster-1
      ZONE=us-west1-a

      # Create the cluster.
      gcloud beta container clusters create "$CLUSTER" \
          --zone "$ZONE" \
          --machine-type "n1-standard-1" \
          --num-nodes "3"

      # Configure kubectl authorization.
      gcloud container clusters get-credentials "$CLUSTER" --zone "$ZONE"

      # Bootstrap RBAC cluster-admin for your user.
      # More info: https://cloud.google.com/kubernetes-engine/docs/how-to/role-based-access-control
      kubectl create clusterrolebinding cluster-admin-binding \
        --clusterrole cluster-admin --user $(gcloud config get-value account)
      ```

      # Deploy Couchbase Clusters
      
      The Operator is running so take a look with:

      `kubectl get deployments -o wide`

      To run a Couchbase Cluster in a terminal we create a file called created-cb-cluster.yaml using the contents below:

      ```yaml
      ApiVersion: couchbase.database.couchbase.com/v1beta1
      kind: CouchbaseCluster
      metadata:
        name: cb-cluster-member
      spec:
        baseImage: couchbase/server
        version: enterprise-5.1.0
        authSecret: cb-operator-1-secret
        exposeAdminConsole: true
        cluster:
          dataServiceMemoryQuota: 256
          indexServiceMemoryQuota: 256
          searchServiceMemoryQuota: 256
          indexStorageSetting: memory_optimized
          autoFailoverTimeout: 5
        buckets:
          - name: default
            type: couchbase
            memoryQuota: 128
            replicas: 2
            ioPriority: high
            evictionPolicy: fullEviction
            conflictResolution: seqno
            enableFlush: true
            enableIndexReplica: false
        servers:
          - size: 5
            name: all_services
            services:
              - data
              - index
              - query
              - search
            dataPath: /opt/couchbase/var/lib/couchbase/data
            indexPath: /opt/couchbase/var/lib/couchbase/data
      ```

      Make sure that your authSecret value in your file matches the "Secret" under "Components" value (on the left).  Add any additonal edits that you deem necessary.

      Now we use our recently created file to deploy our Couchbase Clusters using kubectl:

      `kubectl apply -f created-cb-cluster.yaml`

      We want to Wait until at least the first node is ready:

      `kubectl get pods --watch`

      Control-C to cancel the watch after at least one is ready (the output will look similar to below):

      ```
                     NAME                                 READY     STATUS                             
      cb-cluster-member-0000                              1/1       Running
      ```

      Now we need to forward ports so we can access the Couchbase WebUI.  Open a __new terminal window__ and run:

      `kubectl port-forward cb-cluster-member-0000 8091:8091`

      We are almost finished.  Open a browser window and navigate to the [Couchbase Web UI](https://localhost:8091)

      Username: Administrator
       
      Find the Password on the left Under Application info as "Couchbase WebUI Password" (click the "preview secret data" link)
      
      fin
  info:
  - name: Couchbase WebUI Password
    type: Reference
    valueFrom:
      secretKeyRef:
        key: password
        name: $name-secret
  type: Couchbase
  version: '0.81beta'
  selector:
    matchLabels:
      app.kubernetes.io/name: "$name"
  componentKinds:
  - group: apps/v1beta2
    kind: Deployment
  - group: batch/v1
    kind: Job
  - group: v1
    kind: PersistentVolumeClaim
  - group: v1
    kind: Secret
  - group: v1
    kind: Service
---
apiVersion: v1
kind: Secret
metadata:
  name: "$name-secret"
  labels:
    app.kubernetes.io/name: "$name"
type: Opaque
data:
  username: QWRtaW5pc3RyYXRvcg==
  password: $dbPassword
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: couchbase-operator
  namespace: "$namespace"
  labels:
    app.kubernetes.io/name: "$name"
spec:
  replicas: $operatorReplicas
  template:
    metadata:
      labels:
        name: couchbase-operator
    spec:
    spec:
      serviceAccountName: $operatorServiceAccount
      containers:
      - name: couchbase-operator
        image: "$couchbaseOperatorImage"
        env:
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
          - name: readiness-port
            containerPort: $containerPort
        readinessProbe:
          httpGet:
            path: /readyz
            port: readiness-port
          initialDelaySeconds: $initialDelaySeconds
          periodSeconds: $periodSeconds
          failureThreshold: $failureThreshold
---
